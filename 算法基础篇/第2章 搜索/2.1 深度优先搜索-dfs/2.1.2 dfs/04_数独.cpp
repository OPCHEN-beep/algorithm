//# P1784 数独
//
//## 题目描述
//
//数独是根据 $9 \times 9$ 盘面上的已知数字，推理出所有剩余空格的数字，并满足每一行、每一列、每一个粗线宫内的数字均含 $1 - 9$ ，不重复。每一道合格的数独谜题都有且仅有唯一答案，推理方法也以此为基础，任何无解或多解的题目都是不合格的。
//
//芬兰一位数学家号称设计出全球最难的“数独游戏”，并刊登在报纸上，让大家去挑战。
//
//这位数学家说，他相信只有“智慧最顶尖”的人才有可能破解这个“数独之谜”。
//
//据介绍，目前数独游戏的难度的等级有一到五级，一是入门等级，五则比较难。不过这位数学家说，他所设计的数独游戏难度等级是十一，可以说是所有数独游戏中，难度最高的等级。他还表示，他目前还没遇到解不出来的数独游戏，因此他认为“最具挑战性”的数独游戏并没有出现。
//
//## 输入格式
//
//一个未填的数独。
//
//## 输出格式
//
//填好的数独。
//
//## 输入输出样例 #1
//
//### 输入 #1
//
//```
//8 0 0 0 0 0 0 0 0 
//0 0 3 6 0 0 0 0 0 
//0 7 0 0 9 0 2 0 0 
//0 5 0 0 0 7 0 0 0 
//0 0 0 0 4 5 7 0 0 
//0 0 0 1 0 0 0 3 0 
//0 0 1 0 0 0 0 6 8 
//0 0 8 5 0 0 0 1 0 
//0 9 0 0 0 0 4 0 0
//```
//
//### 输出 #1
//
//```
//8 1 2 7 5 3 6 4 9 
//9 4 3 6 8 2 1 7 5 
//6 7 5 4 9 1 2 8 3 
//1 5 4 2 3 7 8 9 6 
//3 6 9 8 4 5 7 2 1 
//2 8 7 1 6 9 5 3 4 
//5 2 1 9 7 4 3 6 8 
//4 3 8 5 2 6 9 1 7 
//7 9 6 3 1 8 4 5 2
//```
//
//## 说明/提示
//
//2022-04-17 @farteryhr 贡献了三组 hack 数据。加入了其中两组。第三组过强（来源：<https://www.dcc.fc.up.pt/~acm/sudoku.pdf>），放在下边供自测。
//
//```
//9 0 0 8 0 0 0 0 0
//0 0 0 0 0 0 5 0 0 
//0 0 0 0 0 0 0 0 0 
//0 2 0 0 1 0 0 0 3
//0 1 0 0 0 0 0 6 0
//0 0 0 4 0 0 0 7 0
//7 0 8 6 0 0 0 0 0 
//0 0 0 0 3 0 1 0 0 
//4 0 0 0 0 0 2 0 0 
//```
//
//输出
//
//```
//9 7 2 8 5 3 6 1 4 
//1 4 6 2 7 9 5 3 8 
//5 8 3 1 4 6 7 2 9 
//6 2 4 7 1 8 9 5 3 
//8 1 7 3 9 5 4 6 2 
//3 5 9 4 6 2 8 7 1 
//7 9 8 6 2 1 3 4 5 
//2 6 5 9 3 4 1 8 7 
//4 3 1 5 8 7 2 9 6 
//```

#include <iostream>

using namespace std;

const int N = 10;

int n = 9;
int a[N][N];
bool row[N][N], col[N][N], st[N][N][N];

bool dfs(int i, int j)
{
    if(j == n)
    {
        //当这一行填满之后
        i++;
        j = 0;
    }

    if(i == n) return true;  //找到一种合法的情况，就停止递归
    if(a[i][j]) return dfs(i, j + 1);

    for(int x = 1; x <= 9; x++)
    {
        if(row[i][x] || col[j][x] || st[i / 3][j / 3][x]) continue; //剪枝
        row[i][x] = col[j][x] = st[i / 3][j / 3][x] = true;
        a[i][j] = x;

        if(dfs(i, j + 1)) return true;

        //恢复现场
        row[i][x] = col[j][x] = st[i / 3][j / 3][x] = false;
        a[i][j] = 0;
    }

    return false;
}

int main()
{
    for(int i = 0; i < n; i++)
    {
        for(int j = 0; j < n; j++)
        {
            cin >> a[i][j];
            int x = a[i][j];
            if(x)
            {
                //标记一下
                row[i][x] = col[j][x] = st[i / 3][j / 3][x] = true;
            }
        }
    }

    dfs(0, 0);

    for(int i = 0; i < n; i++)
    {
        for(int j = 0; j < n; j++)
        {
            cout << a[i][j] << " ";
        }
        cout << endl;
    }

    return 0;
}
