//# P1115 最大子段和
//
//## 题目描述
//
//给出一个长度为 $n$ 的序列 $a$，选出其中连续且非空的一段使得这段和最大。
//
//## 输入格式
//
//第一行是一个整数，表示序列的长度 $n$。
//
//第二行有 $n$ 个整数，第 $i$ 个整数表示序列的第 $i$ 个数字 $a_i$。
//
//## 输出格式
//
//输出一行一个整数表示答案。
//
//## 输入输出样例 #1
//
//### 输入 #1
//
//```
//7
//2 -4 3 -1 2 -4 3
//```
//
//### 输出 #1
//
//```
//4
//```
//
//## 说明/提示
//
//#### 样例 1 解释
//
//选取 $[3, 5]$ 子段 $\{3, -1, 2\}$，其和为 $4$。
//
//#### 数据规模与约定
//
//- 对于 $40\%$ 的数据，保证 $n \leq 2 \times 10^3$。
//- 对于 $100\%$ 的数据，保证 $1 \leq n \leq 2 \times 10^5$，$-10^4 \leq a_i \leq 10^4$。

#include <iostream>

using namespace std;

const int N = 2e5 + 10;

int n;
int a[N];

int dfs(int l, int r)
{
    if(l == r) return a[l];

    int mid = (l + r) >> 1;
    //先求一下左右两边的最大值
    int ret = max(dfs(l, mid), dfs(mid + 1, r));

    int suml = a[mid], sumr = a[mid + 1];
    int maxl = suml, maxr = sumr;

    //求出以a[mid]为开始，向左延伸的最大值
    for(int i = mid - 1; i >= l; i--)
    {
        suml += a[i];
        maxl = max(maxl, suml);
    }

    //求出以a[mid + 1]开始，向右延伸的最大值
    for(int i = mid + 2; i <= r; i++)
    {
        sumr += a[i];
        maxr = max(maxr, sumr);
    }

    //返回三种情况的最大值
    return max(maxr + maxl, ret);
}

int main()
{
    cin >> n;
    for(int i = 1; i <= n; i++) cin >> a[i];
    cout << dfs(1, n) << endl;

    return 0;
}
