//# P5731 【深基5.习6】蛇形方阵
//
//## 题目描述
//
//给出一个不大于 $9$ 的正整数 $n$，输出 $n\times n$ 
//的蛇形方阵。
//
//从左上角填上 $1$ 开始，顺时针方向依次填入数字，如同样例所示。注意每个数字有都会占用 $3$ 个字符，前面使用空格补齐。
//
//## 输入格式
//
//输入一个正整数 $n$，含义如题所述。
//
//## 输出格式
//
//输出符合题目要求的蛇形矩阵。
//
//## 输入输出样例 #1
//
//### 输入 #1
//
//```
//4
//```
//
//### 输出 #1
//
//```
//1  2  3  4
// 12 13 14  5
// 11 16 15  6
// 10  9  8  7
//```
//
//## 说明/提示
//
//数据保证，$1 \leq n \leq 9$。

#include <iostream>

using namespace std;

const int N = 15;

int dx[] = {0, 1, 0, -1};
int dy[] = {1, 0, -1, 0};

int arr[N][N];

int main()
{
    int n;
    cin >> n;

    //模拟填数过程
    int x = 1, y = 1;//初始位置
    int cnt = 1;//当前位置需要填的数字
    int pos = 0;//当前的方向

    while(cnt <= n * n)
    {
        arr[x][y] = cnt;

        //计算下一个位置
        int a = x + dx[pos], b = y + dy[pos];

        //判断是否越界
        if(a < 1 || a > n || b < 1 || b > n || arr[a][b])
        {
            //更新出正确的该走的位置
            pos = (pos + 1) % 4;
            a = x + dx[pos], b = y + dy[pos];
        }

        x = a, y = b;
        cnt++;
    }

    //输出
    for(int i = 1; i <= n; i++)
    {
        for(int j = 1; j <= n; j++)
        {
            printf("%3d", arr[i][j]);
        }
        puts("");
    }

    return 0;
}
