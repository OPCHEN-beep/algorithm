//# P1098 [NOIP 2007 提高组] _
//
//## 题目描述
//
//在初赛普及组的“阅读程序写结果”的问题中，我们曾给出一个字符串展开的例子：如果在输入的字符串中，含有类似于 `d-h` 或者 `4-8` 的字串，我们就把它当作一种简写，输出时，用连续递增的字母或数字串替代其中的减号，即，将上面两个子串分别输出为 `defgh` 和 `45678`。在本题中，我们通过增加一些参数的设置，使字符串的展开更为灵活。具体约定如下：
//
//(1) 遇到下面的情况需要做字符串的展开：在输入的字符串中，出现了减号 `-` ，减号两侧同为小写字母或同为数字，且按照 `ASCII` 码的顺序，减号右边的字符严格大于左边的字符。
//
//(2) 参数 $p_1$：展开方式。$p_1=1$ 时，对于字母子串，填充小写字母；$p_1=2$ 时，对于字母子串，填充大写字母。这两种情况下数字子串的填充方式相同。$p_1=3$ 时，不论是字母子串还是数字字串，都用与要填充的字母个数相同的星号 `*` 来填充。
//
//(3) 参数 $p_2$：填充字符的重复个数。$p_2=k$ 表示同一个字符要连续填充 $k$ 个。例如，当 $p_2=3$ 时，子串`d-h` 应扩展为 `deeefffgggh`。减号两边的字符不变。
//
//(4) 参数 $p_3$：是否改为逆序：$p_3=1$ 表示维持原来顺序，$p_3=2$ 表示采用逆序输出，注意这时候仍然不包括减号两端的字符。例如当 $p_1=1$、$p_2=2$、$p_3=2$ 时，子串 `d-h` 应扩展为 `dggffeeh`。
//
//(5) 如果减号右边的字符恰好是左边字符的后继，只删除中间的减号，例如：`d-e` 应输出为 `de`，`3-4` 应输出为 `34`。如果减号右边的字符按照 `ASCII` 码的顺序小于或等于左边字符，输出时，要保留中间的减号，例如：`d-d` 应输出为 `d-d`，`3-1` 应输出为 `3-1`。
//
//## 输入格式
//
//共两行。
//
//第 $1$ 行为用空格隔开的 $3$ 个正整数，依次表示参数 $p_1,p_2,p_3$。
//
//第 $2$ 行为一行字符串，仅由数字、小写字母和减号 `-` 组成。行首和行末均无空格。
//
//## 输出格式
//
//共一行，为展开后的字符串。
//
//## 输入输出样例 #1
//
//### 输入 #1
//
//```
//1 2 1
//abcs-w1234-9s-4zz
//```
//
//### 输出 #1
//
//```
//abcsttuuvvw1234556677889s-4zz
//```
//
//## 输入输出样例 #2
//
//### 输入 #2
//
//```
//2 3 2
//a-d-d
//```
//
//### 输出 #2
//
//```
//aCCCBBBd-d
//```
//
//## 说明/提示
//
//$40\%$ 的数据满足：字符串长度不超过 $5$。
//
//$100\%$ 的数据满足：$1  \le  p_1  \le  3,1  \le  p_2  \le  8,1  \le  p_3  \le  2$。字符串长度不超过 $100$。
//
//NOIP 2007 提高第二题

#include <iostream>
#include <string>
#include <algorithm>

using namespace std;

int p1, p2, p3, n;
string s;
string ret;

//判断是否是数字字符
bool isdig(char ch)
{
    return ch >= '0' && ch <= '9';
}

//判断是否是小写字母
bool islet(char ch)
{
    return ch >= 'a' && ch <= 'z';
}

//展开字符串
//把（left, right）之间的字符展开
//left, right这两个字符是不做处理的
void add(char left, char right)
{
    string t;

    //遍历中间字符
    for(char ch = left + 1; ch < right; ch++)
    {
        char tmp = ch;
        //处理p1
        if(p1 == 2 && islet(tmp)) tmp -= 32;//把小写字母变大写
        else if(p1 == 3) tmp = '*';//变成*号

        //处理p2
        for(int i = 0; i < p2; i++)
        {
            t += tmp;
        }
    }

    //处理p3
    if(p3 == 2) reverse(t.begin(), t.end());

    ret += t;
}

int main()
{
    cin >> p1 >> p2 >> p3 >> s;
    n = s.size();

    for(int i = 0; i < n; i++)
    {
        char ch = s[i];

        if(s[i] != '-' || i == 0 || i == n - 1)
            ret += ch;
        else{
            char left = s[i - 1], right = s[i + 1];
            //判断是否展开
            if(isdig(left) && isdig(right) && right > left ||
               islet(left) && islet(right) && right > left)
            {
                //展开
                add(left, right);
            }
            else
            {
                ret += ch;
            }
        }
    }

    cout << ret << endl;

    return 0;
}
