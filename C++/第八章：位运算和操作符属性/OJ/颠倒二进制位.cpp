//190. 颠倒二进制位
//尝试过
//简单
//相关标签
//premium lock icon
//相关企业
//颠倒给定的 32 位无符号整数的二进制位。
//
// 
//
//示例 1：
//
//输入：n = 43261596
//
//输出：964176192
//
//解释：
//
//整数	二进制
//43261596	00000010100101000001111010011100
//964176192	00111001011110000010100101000000
//示例 2：
//
//输入：n = 2147483644
//
//输出：1073741822
//
//解释：
//
//整数	二进制
//2147483644	01111111111111111111111111111100
//1073741822	00111111111111111111111111111110
// 
//
//提示：
//
//0 <= n <= 231 - 2
//n 为偶数
// 
//
//进阶: 如果多次调用这个函数，你将如何优化你的算法？


class Solution {
public:
    uint32_t reverseBits(uint32_t n) {
        int i = 0;
        uint32_t ret = 0;
        for(i = 0; i < 32; i++)
        {
           //获取n中的一个二进制位
           uint32_t b = ((n >> i) & 1);
            //移动这个二进制位到合适的位置，然后存放在ret中
          ret |= (b << (31 - i));
        }
    }
};
