//# B2108 图像模糊处理
//
//## 题目描述
//
//给定 $n$ 行 $m$ 列的图像各像素点的灰度值，要求用如下方法对其进行模糊化处理：
//
//$1.$ 四周最外侧的像素点灰度值不变；
//
//$2.$ 中间各像素点新灰度值为该像素点及其上下左右相邻四个像素点原灰度值的平均（舍入到最接近的整数）。
//
//## 输入格式
//
//第一行包含两个整数 $n$ 和 $m$，表示图像包含像素点的行数和列数。$1 \le n \le 100$，$1 \le m \le 100$。
//
//接下来 $n$ 行，每行 $m$ 个整数，表示图像的每个像素点灰度。相邻两个整数之间用单个空格隔开，每个元素均在 $0$ ～ $255$ 之间。
//
//## 输出格式
//
//$n$ 行，每行 $m$ 个整数，为模糊处理后的图像。相邻两个整数之间用单个空格隔开。
//
//## 输入输出样例 #1
//
//### 输入 #1
//
//```
//4 5
//100 0 100 0 50
//50 100 200 0 0
//50 50 100 100 200
//100 100 50 50 100
//```
//
//### 输出 #1
//
//```
//100 0 100 0 50
//50 80 100 60 0
//50 80 100 90 200
//100 100 50 50 100
//```

//错误答案： 
//#include <iostream>
//#include <cstdio>
//#include <cstring>
//using namespace std;
//
//int a[110][110] = {0};
//int b[110][110] = {0};
//int n, m;
//int sum;
//
//int main()
//{
//    cin >> n >> m;
//    for(int i = 0; i < n; i++)
//    {
//        for(int j = 0; j < m; j++)
//        {
//            cin >> a[i][j];
//        }
//    }
//
//    memcpy(b, a, n * m * sizeof(int));
//    
//    //输出
//    for(int i = 0; i < n; i++)
//    {
//        for(int j = 0; j < m; j++)
//        {
//            if(i != 0 && j != 0 && i != n - 1 && j != m - 1)
//                b[i][j] = (a[i-1][j] + a[i][j-1] + a[i][j+1] + a[i+1][j] + a[i][j]) / 5;
//            cout << b[i][j] << " ";
//        }
//        cout << endl;
//    }
//
//    return 0;
//}


//正确答案：
#include <iostream>
#include <cstdio>
#include <cstring>
using namespace std;

int a[110][110] = {0};
int b[110][110] = {0};
int n, m;
int sum;

int main()
{
    cin >> n >> m;
    for(int i = 0; i < n; i++)
    {
        for(int j = 0; j < m; j++)
        {
            cin >> a[i][j];
            b[i][j] = a[i][j];
        }
    }

    
    //输出
    for(int i = 0; i < n; i++)
    {
        for(int j = 0; j < m; j++)
        {
            if(i != 0 && j != 0 && i != n - 1 && j != m - 1)
                b[i][j] = (int)((a[i-1][j] + a[i][j-1] + a[i][j+1] + a[i+1][j] + a[i][j]) / 5.0 + 0.5);
            cout << b[i][j] << " ";
        }
        cout << endl;
    }

    return 0;
} 
