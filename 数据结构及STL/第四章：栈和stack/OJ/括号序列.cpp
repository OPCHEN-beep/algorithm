//# P1241 括号序列
//
//## 题目描述
//
//定义如下规则：
//
//1. 空串是「平衡括号序列」
//2. 若字符串 $S$ 是「平衡括号序列」，那么 $\texttt{[}S\texttt]$ 和 $\texttt{(}S\texttt)$ 也都是「平衡括号序列」
//3. 若字符串 $A$ 和 $B$ 都是「平衡括号序列」，那么 $AB$（两字符串拼接起来）也是「平衡括号序列」。
//
//
//例如，下面的字符串都是平衡括号序列：
//
//
//- `()`，`[]`，`(())`，`([])`，`()[]`，`()[()]`
//
//
//而以下几个则不是：
//
//
//- `(`，`[`，`]`，`)(`，`())`，`([()`
//
//
//现在，给定一个仅由 `(`，`)`，`[`，`]`构成的字符串 $s$，请你按照如下的方式给字符串中每个字符配对：
//1. 从左到右扫描整个字符串。
//2. 对于当前的字符，如果它是一个右括号，考察它与它左侧离它**最近**的**未匹配**的的左括号。如果该括号与之对应（即小括号匹配小括号，中括号匹配中括号），则将二者配对。如果左侧未匹配的左括号不存在或与之不对应，则其配对失败。
//
//配对结束后，对于 $s$ 中全部未配对的括号，请你在其旁边添加一个字符，使得该括号和新加的括号匹配。
//
//## 输入格式
//
//输入只有一行一个字符串，表示 $s$。
//
//## 输出格式
//
//输出一行一个字符串表示你的答案。
//
//## 输入输出样例 #1
//
//### 输入 #1
//
//```
//([()
//```
//
//### 输出 #1
//
//```
//()[]()
//```
//
//## 输入输出样例 #2
//
//### 输入 #2
//
//```
//([)
//```
//
//### 输出 #2
//
//```
//()[]()
//```
//
//## 说明/提示
//
//### 数据规模与约定
//
//对于全部的测试点，保证 $s$ 的长度不超过 $100$，且只含  `(`，`)`，`[`，`]` 四种字符。

#include <iostream>
#include <stack>
#include <string>

using namespace std;

const int N = 110;
bool st[N];//st[i]标记是否已经匹配

int main()
{
    string s;
    cin >> s;
    stack<int> stk;

    for(int i = 0; i < s.size(); i++)
    {
        char ch = s[i];
        if(ch == '[' || ch == '(')
            stk.push(i);
        else
        {
            //右括号
            if(stk.empty())
                continue;
            int t = stk.top();
            char left = s[t];
            if((left == '(' && ch == ')') || (left == '[' && ch == ']'))
            {
                st[t] = st[i] = true;
                stk.pop();
            }
        }
    }
    //还原字符串
    string ret = "";
    for(int i = 0; i < s.size(); i++)
    {
        char ch = s[i];
        if(st[i])
            ret += ch;
        else
        {
            if(ch == '(')
            {
                ret += ch;
                ret += ')';
            }
            else if(ch == ')')
            {
                ret += '(';
                ret += ch;
            }
            else if(ch == '[')
            {
                ret += ch;
                ret += ']';
            }
            else
            {
                ret += '[';
                ret += ch;
            }
        }
    }
    cout << ret << endl;

    return 0;
} 
