//# B3631 单向链表
//
//## 题目描述
//
//实现一个数据结构，维护一张表（最初只有一个元素 $1$）。需要支持下面的操作，其中 $x$ 和 $y$ 都是 $1$ 到 $10^6$ 范围内的正整数，且保证任何时间表中所有数字均不相同，操作数量不多于 $10^5$：
//
//- `1 x y` ：将元素 $y$ 插入到 $x$ 后面；
//- `2 x` ：询问 $x$ 后面的元素是什么。如果 $x$ 是最后一个元素，则输出 $0$；
//- `3 x`：从表中删除元素 $x$ **后面的那个元素**，不改变其他元素的先后顺序。
//
//## 输入格式
//
//第一行一个整数 $q$ 表示操作次数。
//
//接下来 $q$ 行，每行表示一次操作，操作具体见题目描述。
//
//## 输出格式
//
//对于每个操作 2，输出一个数字，用换行隔开。
//
//## 输入输出样例 #1
//
//### 输入 #1
//
//```
//6
//1 1 99
//1 99 50
//1 99 75
//2 99
//3 75
//2 1
//```
//
//### 输出 #1
//
//```
//75
//99
//```

#include <iostream>
using namespace std;

const int N = 1e5 + 10, M = 1e6 + 10;

int h, e[N], ne[N], op, x, y, id;
int mp[M];


int main()
{
    int q;
    cin >> q;

    //初始化
    id++;
    ne[id] = 1;
    mp[1] = id;

    while(q--)
    {
        int op, x, y;
        cin >> op >> x;
        int p = mp[x];//x存的位置

        if(op == 1)
        {
            cin >> y;

            id++;
            e[id] = y;
            ne[id] = ne[p];
            ne[p] = id;

            mp[y] = id;//标记y这个元素存的位置
        }
        else if(op == 2)
        {
            cout << e[ne[p]] << endl;
        }

        else
        {
            ne[p] = ne[ne[p]];
        }
    }

    return 0;
}
